<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection ConfigurationA" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">tableA</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/TestDA</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">5578</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">postgres</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Request_A" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP SCHEMA IF EXISTS public CASCADE;
CREATE schema public;
DROP TABLE IF EXISTS public.product_stats_perf_temp;
CREATE TABLE public.product_stats_perf_temp (
id serial, tstamp timestamp DEFAULT now(), operation text, new_val json, old_val json, code varchar);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_fucntion_creation_A" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">CREATE OR REPLACE FUNCTION public.np_insert_stats_perf_temp_func()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $function$
BEGIN
IF TG_OP = &apos;INSERT&apos;
THEN
INSERT INTO public.product_stats_perf_temp(operation, new_val, code)
VALUES (TG_OP, row_to_json(NEW), new.code);
RETURN NEW;
END IF;
END;
$function$;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_TriggerCreation_A" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP TRIGGER IF EXISTS np_insert_stats_perf_temp_tg
  ON public.product_stats_perf_temp;
CREATE TRIGGER np_insert_stats_perf_temp_tg AFTER
INSERT
    ON
    public.product_stats_perf_temp 
    FOR EACH ROW
    WHEN (pg_trigger_depth() &lt; 0) 
    EXECUTE FUNCTION np_insert_stats_perf_temp_func()</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Insert_A" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">INSERT INTO public.product_stats_perf_temp(code) VALUES (${__time(,)}1111);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Create_Schema_A" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP SCHEMA IF EXISTS performance_schema CASCADE;
CREATE schema performance_schema;
DROP EXTENSION IF EXISTS postgres_fdw CASCADE;
CREATE EXTENSION postgres_fdw;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Create_Server_A" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP SERVER IF EXISTS hmx_mdm_localhost CASCADE;
CREATE SERVER hmx_mdm_localhost
FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host &apos;localhost&apos;, port &apos;5432&apos;, dbname &apos;TestDA&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_CreateUserMapping_A" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP USER MAPPING IF EXISTS FOR postgres SERVER hmx_mdm_localhost;
CREATE USER MAPPING FOR postgres
SERVER hmx_mdm_localhost
OPTIONS (user &apos;postgres&apos;, password &apos;5578&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Import Foreign Schema_A" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP FOREIGN TABLE IF exists performance_schema.product_stats_perf_temp;
IMPORT FOREIGN SCHEMA public LIMIT TO (product_stats_perf_temp)
FROM SERVER hmx_mdm_localhost INTO performance_schema;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Request_B" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP SCHEMA IF EXISTS performance_schema CASCADE;
CREATE schema performance_schema;
DROP TABLE IF EXISTS performance_schema.product_stats_perf_temp;
CREATE TABLE performance_schema.product_stats_perf_temp (
id serial, tstamp timestamp DEFAULT now(), operation text, new_val json, old_val json, code varchar);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_fucntion_creation_B" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">CREATE OR REPLACE FUNCTION performance_schema.np_insert_stats_perf_temp_func()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $function$
BEGIN
IF TG_OP = &apos;INSERT&apos;
THEN
INSERT INTO performance_schema.product_stats_perf_temp(operation, new_val, code)
VALUES (TG_OP, row_to_json(NEW), new.code);
RETURN NEW;
END IF;
END;
$function$;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_TriggerCreation_B" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">DROP TRIGGER IF EXISTS np_insert_stats_perf_temp_tg
  ON performance_schema.product_stats_perf_temp;
CREATE TRIGGER np_insert_stats_perf_temp_tg AFTER
INSERT
    ON
    performance_schema.product_stats_perf_temp 
    FOR EACH ROW 
    WHEN (pg_trigger_depth() &lt; 0)
    EXECUTE FUNCTION np_insert_stats_perf_temp_func()</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Insert_B" enabled="false">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">INSERT INTO performance_schema.product_stats_perf_temp(code) VALUES (${__time(,)}2222);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Insert_A" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">INSERT INTO public.product_stats_perf_temp(code) VALUES (${__time(,)}1111);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_Insert_B" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="query">INSERT INTO performance_schema.product_stats_perf_temp(code) VALUES (${__time(,)}2222);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC_CalculateSyncTime" enabled="true">
            <stringProp name="dataSource">tableA</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(timedifference) AS COUNT,
MIN(timedifference) AS MIN,
AVG(timedifference) AS AVG,
MAX(timedifference) AS MAX,
PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY timedifference) AS MEDIAN,
PERCENTILE_DISC(0.90) WITHIN GROUP (ORDER BY timedifference) AS NINTH_PERCENTILE
FROM (SELECT ps1.tstamp AS TimeStamp_MDM, ps1.id AS CODE_MDM, ps2.tstamp AS TimeStamp_BSMX,ps2.id AS CODE_BSMX, EXTRACT (EPOCH FROM ps2.tstamp - ps1.tstamp) AS TimeDifference
FROM  public.product_stats_perf_temp AS ps1
JOIN performance_schema.product_stats_perf_temp AS ps2
ON ps1.id = ps2.id ORDER BY timedifference ASC) AS ASD </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import java.text.DecimalFormat;
import java.io.File;
import org.apache.jmeter.services.FileServer; //jmeter spelling corrected
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList; // import the ArrayList class
 
 
resultSet = vars.getObject(&quot;product&quot;);
//resultSet = vars.getObject(&quot;jmeterHome&quot;)
result = new StringBuilder();
 
String testPlanFile = FileServer.getFileServer().getBaseDir();
//String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
//String path = testPlanFile + &quot;testname.csv&quot;;
//def String testPlanFileDir = ${jmeterHome}
// NEXT AGGREGATE  count    min avg max median  ninth_percentile
for (Object row : resultSet ) {
 
    format = new DecimalFormat(&quot;#0.000&quot;)
     
    result.append(&quot;Reqs: &quot;)
    result.append(row.getAt(&quot;count&quot;))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
 
    result.append(&quot;Min:  &quot;)
    result.append(format.format(row.getAt(&quot;min&quot;)))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
 
    result.append(&quot;Avg:  &quot;)
    result.append(format.format(row.getAt(&quot;avg&quot;)))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
 
    result.append(&quot;Max:  &quot;)
    result.append(format.format(row.getAt(&quot;max&quot;)))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
 
    result.append(&quot;50%:  &quot;)
    result.append(format.format(row.getAt(&quot;median&quot;)))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
 
    result.append(&quot;90%:  &quot;)
    result.append(format.format(row.getAt(&quot;ninth_percentile&quot;)))
    result.append(&quot;,&quot;)
    result.append(System.getProperty(&quot;line.separator&quot;))
}
String os = System.getProperty(&quot;os.name&quot;);
String path;
      if (os.equals(&quot;Windows 10&quot;)) {
        path = &quot;/../DebugKafkaTestResults/&quot;;
      } else {
      path = &quot;/../performanceResults/&quot;;
      }
 
org.apache.commons.io.FileUtils.writeStringToFile(new File(testPlanFile + path + &quot;${__time(,).csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
