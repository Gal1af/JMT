<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Manualy set of different message test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Execution variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">input variable</stringProp>
          </elementProp>
          <elementProp name="instance" elementType="Argument">
            <stringProp name="Argument.name">instance</stringProp>
            <stringProp name="Argument.value">${__P(instance,nft3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">input variable</stringProp>
          </elementProp>
          <elementProp name="Const_timer" elementType="Argument">
            <stringProp name="Argument.name">Const_timer</stringProp>
            <stringProp name="Argument.value">${__P(input_time,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STANValue" elementType="Argument">
            <stringProp name="Argument.name">STANValue</stringProp>
            <stringProp name="Argument.value">${__P(STANValue,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STANMax" elementType="Argument">
            <stringProp name="Argument.name">STANMax</stringProp>
            <stringProp name="Argument.value">${__P(STANMax,1111)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIDValue" elementType="Argument">
            <stringProp name="Argument.name">TIDValue</stringProp>
            <stringProp name="Argument.value">${__P(TIDValue,71300011)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIDMax" elementType="Argument">
            <stringProp name="Argument.name">TIDMax</stringProp>
            <stringProp name="Argument.value">${__P(TIDMax,71319998)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WNSP_Connect_serviceID" elementType="Argument">
            <stringProp name="Argument.name">WNSP_Connect_serviceID</stringProp>
            <stringProp name="Argument.value">PMG.4-01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampup" elementType="Argument">
            <stringProp name="Argument.name">rampup</stringProp>
            <stringProp name="Argument.value">${__P(rampup,1)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CURRENT_TIME" elementType="Argument">
            <stringProp name="Argument.name">CURRENT_TIME</stringProp>
            <stringProp name="Argument.value">${__time(HHmmss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CURRENT_DATE" elementType="Argument">
            <stringProp name="Argument.name">CURRENT_DATE</stringProp>
            <stringProp name="Argument.value">${__time(yyMMdd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">${__P(duration,600)}     ${__P(input_users,1)}</stringProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="endPoint.csv" enabled="true">
        <stringProp name="filename">config/${instance}endPoint.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">TCPConnect_IP,TCP_BDK</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="anymessage.csv" enabled="true">
        <stringProp name="filename">config/anymessage.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">FID-X,FID-B,FIX-T</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">$duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="TID" enabled="true">
          <stringProp name="CounterConfig.start">${TIDValue}</stringProp>
          <stringProp name="CounterConfig.end">${TIDMax}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">TID</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
          <stringProp name="TestPlan.comments">${__P(TIDValue,71300011)}  ${__P(TIDMax,71319998)}</stringProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="STAN" enabled="true">
          <stringProp name="CounterConfig.start">${STANValue}</stringProp>
          <stringProp name="CounterConfig.end">${STANMax}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">STAN</stringProp>
          <stringProp name="CounterConfig.format">000000</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <stringProp name="TestPlan.comments">${__P(STANValue,1)}  ${__P(STANMax,1111)}</stringProp>
        </CounterConfig>
        <hashTree/>
        <com.aevi.jmeter.wnsp.samplers.TCPConnectSampler guiclass="com.aevi.jmeter.wnsp.samplers.TCPConnectGui" testclass="com.aevi.jmeter.wnsp.samplers.TCPConnectSampler" testname="WNSP_TCPConnect" enabled="true">
          <stringProp name="ip">194.213.40.164</stringProp>
          <intProp name="port">12100</intProp>
          <longProp name="timeout">5000</longProp>
          <boolProp name="ssl">false</boolProp>
          <stringProp name="BDK">${TCP_BDK}</stringProp>
        </com.aevi.jmeter.wnsp.samplers.TCPConnectSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${Const_timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.aevi.jmeter.wnsp.samplers.WNSPConnectSampler guiclass="com.aevi.jmeter.wnsp.samplers.WNSPConnectGui" testclass="com.aevi.jmeter.wnsp.samplers.WNSPConnectSampler" testname="WNSP_Connect" enabled="true">
          <stringProp name="ip">localhost</stringProp>
          <intProp name="port">1234</intProp>
          <stringProp name="tid">${TID}</stringProp>
          <longProp name="timeout">3000</longProp>
          <stringProp name="version">1</stringProp>
          <stringProp name="serviceId">${WNSP_Connect_serviceID}</stringProp>
          <stringProp name="connectionType">PMG</stringProp>
        </com.aevi.jmeter.wnsp.samplers.WNSPConnectSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${Const_timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.aevi.jmeter.wnsp.samplers.WNSPAnyMessageSampler guiclass="com.aevi.jmeter.wnsp.samplers.WNSPAnyMessageGui" testclass="com.aevi.jmeter.wnsp.samplers.WNSPAnyMessageSampler" testname="WNSP_AnyMessage" enabled="true">
          <stringProp name="tid">${TID}</stringProp>
          <stringProp name="msg">&lt;WNSP&gt;
   &lt;FID Name=&quot;T&quot; Data=&quot;${TID}&quot;/&gt;
   &lt;FID Name=&quot;X&quot; Data=&quot;FID-X&quot;/&gt;
   &lt;FID Name=&quot;B&quot; Data=&quot;FID-B&quot;/&gt;
   &lt;FID Name=&quot;s&quot; Data=&quot;${STAN}&quot;/&gt;
    &lt;FID Name=&quot;d&quot; Data=&quot;${CURRENT_DATE}&quot;/&gt;
   &lt;FID Name=&quot;T&quot; Data=&quot;FID-T&quot; /&gt;
&lt;/WNSP&gt;</stringProp>
          <stringProp name="reqType">ELECTRONIC_TICKET</stringProp>
          <stringProp name="resType">ACK</stringProp>
          <boolProp name="withResponse">false</boolProp>
        </com.aevi.jmeter.wnsp.samplers.WNSPAnyMessageSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${Const_timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <com.aevi.jmeter.wnsp.samplers.WNSPDisconnectSampler guiclass="com.aevi.jmeter.wnsp.samplers.WNSPDisconnectGui" testclass="com.aevi.jmeter.wnsp.samplers.WNSPDisconnectSampler" testname="WNSP_Disconnect" enabled="true">
          <stringProp name="tid">${TID}</stringProp>
        </com.aevi.jmeter.wnsp.samplers.WNSPDisconnectSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${Const_timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">AeviReports\test_AnyMessage_AGR.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">AeviReports\test_AnyMessage_VRT.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
